import pygame
import sys
import random

# Inicialização do Pygame
pygame.init()

# Configurações da tela
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 400
GRID_SIZE = 20
GRID_WIDTH = SCREEN_WIDTH // GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // GRID_SIZE

# Cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

# Classe da Cobra
class Snake:
    def __init__(self):
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        self.direction = random.choice([(-1, 0), (1, 0), (0, -1), (0, 1)])
        self.length = 1
        self.color = GREEN
        self.score = 0

    def get_head_position(self):
        return self.positions[0]

    def turn(self, direction):
        if self.length > 1 and (direction[0] * -1, direction[1] * -1) == self.direction:
            return
        else:
            self.direction = direction

    def move(self):
        cur = self.get_head_position()
        x, y = self.direction
        new = ((cur[0] + x * GRID_SIZE) % SCREEN_WIDTH, (cur[1] + y * GRID_SIZE) % SCREEN_HEIGHT)
        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def reset(self):
        self.length = 1
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        self.direction = random.choice([(-1, 0), (1, 0), (0, -1), (0, 1)])
        self.score = 0

    def draw(self, surface):
        for p in self.positions:
            r = pygame.Rect((p[0], p[1]), (GRID_SIZE, GRID_SIZE))
            pygame.draw.rect(surface, self.color, r)
            pygame.draw.rect(surface, BLACK, r, 1)

    def handle_keys(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    self.turn((0, -1))
                elif event.key == pygame.K_DOWN:
                    self.turn((0, 1))
                elif event.key == pygame.K_LEFT:
                    self.turn((-1, 0))
                elif event.key == pygame.K_RIGHT:
                    self.turn((1, 0))

    def collide_with_boundaries(self):
        return self.get_head_position()[0] < 0 or self.get_head_position()[0] >= SCREEN_WIDTH or \
               self.get_head_position()[1] < 0 or self.get_head_position()[1] >= SCREEN_HEIGHT

    def collide_with_self(self):
        return any(segment == self.get_head_position() for segment in self.positions[1:])

# Classe da Comida
class Food:
    def __init__(self):
        self.position = (0, 0)
        self.color = RED
        self.randomize_position()

    def randomize_position(self):
        self.position = (random.randint(0, GRID_WIDTH - 1) * GRID_SIZE,
                         random.randint(0, GRID_HEIGHT - 1) * GRID_SIZE)

    def draw(self, surface):
        r = pygame.Rect((self.position[0], self.position[1]), (GRID_SIZE, GRID_SIZE))
        pygame.draw.rect(surface, self.color, r)
        pygame.draw.rect(surface, BLACK, r, 1)

# Classe do Obstáculo
class Obstacle:
    def __init__(self, position):
        self.position = position
        self.color = WHITE

    def draw(self, surface):
        r = pygame.Rect((self.position[0], self.position[1]), (GRID_SIZE, GRID_SIZE))
        pygame.draw.rect(surface, self.color, r)
        pygame.draw.rect(surface, BLACK, r, 1)

# Classe do Nível
class Level:
    def __init__(self, obstacles_count):
        self.obstacles = []
        self.generate_obstacles(obstacles_count)

    def generate_obstacles(self, count):
        for _ in range(count):
            obstacle_position = (random.randint(0, GRID_WIDTH - 1) * GRID_SIZE,
                                 random.randint(0, GRID_HEIGHT - 1) * GRID_SIZE)
            self.obstacles.append(Obstacle(obstacle_position))

    def draw(self, surface):
        for obstacle in self.obstacles:
            obstacle.draw(surface)

    def check_collision_with_obstacles(self, snake):
        for obstacle in self.obstacles:
            if snake.get_head_position() == obstacle.position:
                return True
        return False

# Classe do Jogo
class Game:
    def __init__(self):
        self.snake = Snake()
        self.food = Food()
        self.level = 1
        self.levels = [
            Level(obstacles_count=0),   # Nível 1 sem obstáculos
            Level(obstacles_count=3),   # Nível 2 com 3 obstáculos
            Level(obstacles_count=5)    # Nível 3 com 5 obstáculos
        ]
        self.current_level = self.levels[self.level - 1]

    def update(self):
        self.snake.move()

        if self.snake.get_head_position() == self.food.position:
            self.snake.length += 1
            self.snake.score += 1
            self.food.randomize_position()

        if self.snake.collide_with_boundaries() or self.snake.collide_with_self() or \
           self.current_level.check_collision_with_obstacles(self.snake):
            self.game_over()
            return

    def game_over(self):
        self.snake.reset()
        self.food.randomize_position()
        self.level = 1
        self.current_level = self.levels[self.level - 1]

    def change_level(self):
        self.level += 1
        if self.level > len(self.levels):
            self.level = 1
        self.current_level = self.levels[self.level - 1]

    def draw(self, surface):
        surface.fill(BLACK)
        self.snake.draw(surface)
        self.food.draw(surface)
        self.current_level.draw(surface)

# Função Principal
def main():
    pygame.display.set_caption("Jogo da Cobrinha com Níveis")
    clock = pygame.time.Clock()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

    game = Game()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    game.snake.turn((0, -1))
                elif event.key == pygame.K_DOWN:
                    game.snake.turn((0, 1))
                elif event.key == pygame.K_LEFT:
                    game.snake.turn((-1, 0))
                elif event.key == pygame.K_RIGHT:
                    game.snake.turn((1, 0))
                elif event.key == pygame.K_SPACE:
                    game.change_level()

        game.update()
        game.draw(screen)

        # Mostra a pontuação na tela
        font = pygame.font.SysFont(None, 24)
        score_text = font.render(f'Pontuação: {game.snake.score}', True, WHITE)
        screen.blit(score_text, (10, 10))

        pygame.display.update()
        clock.tick(10)

if __name__ == "__main__":
    main()
